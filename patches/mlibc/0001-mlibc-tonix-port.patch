From 498f7275d19df0a9ab5ff11b19ce298ae9e2e78b Mon Sep 17 00:00:00 2001
From: Kyota Poeti <kyota.exe@gmail.com>
Date: Thu, 21 Apr 2022 16:06:02 -0400
Subject: [PATCH 1/1] mlibc tonix port

---
 meson.build                                  |   4 +
 options/rtdl/generic/linker.cpp              |   6 +-
 options/rtdl/generic/main.cpp                |   4 +-
 sysdeps/tonix/crt-x86_64/crt0.S              |   7 +
 sysdeps/tonix/generic/Entry.cpp              |  34 +++
 sysdeps/tonix/generic/Generic.cpp            | 293 +++++++++++++++++++
 sysdeps/tonix/include/abi-bits/abi.h         |   1 +
 sysdeps/tonix/include/abi-bits/auxv.h        |   1 +
 sysdeps/tonix/include/abi-bits/blkcnt_t.h    |   1 +
 sysdeps/tonix/include/abi-bits/blksize_t.h   |   1 +
 sysdeps/tonix/include/abi-bits/dev_t.h       |   1 +
 sysdeps/tonix/include/abi-bits/errno.h       |   1 +
 sysdeps/tonix/include/abi-bits/fcntl.h       |   1 +
 sysdeps/tonix/include/abi-bits/gid_t.h       |   1 +
 sysdeps/tonix/include/abi-bits/in.h          |   1 +
 sysdeps/tonix/include/abi-bits/ino_t.h       |   1 +
 sysdeps/tonix/include/abi-bits/limits.h      |   1 +
 sysdeps/tonix/include/abi-bits/mode_t.h      |   1 +
 sysdeps/tonix/include/abi-bits/nlink_t.h     |   1 +
 sysdeps/tonix/include/abi-bits/pid_t.h       |   1 +
 sysdeps/tonix/include/abi-bits/reboot.h      |   1 +
 sysdeps/tonix/include/abi-bits/resource.h    |   1 +
 sysdeps/tonix/include/abi-bits/seek-whence.h |   1 +
 sysdeps/tonix/include/abi-bits/signal.h      |   1 +
 sysdeps/tonix/include/abi-bits/socket.h      |   1 +
 sysdeps/tonix/include/abi-bits/stat.h        |   1 +
 sysdeps/tonix/include/abi-bits/termios.h     |   1 +
 sysdeps/tonix/include/abi-bits/time.h        |   1 +
 sysdeps/tonix/include/abi-bits/uid_t.h       |   1 +
 sysdeps/tonix/include/abi-bits/vm-flags.h    |   1 +
 sysdeps/tonix/include/abi-bits/wait.h        |   1 +
 sysdeps/tonix/include/mlibc/thread-entry.hpp |  11 +
 sysdeps/tonix/include/tonix/SystemCall.h     |  55 ++++
 sysdeps/tonix/include/tonix/VFS.h            |  18 ++
 sysdeps/tonix/meson.build                    |  51 ++++
 35 files changed, 503 insertions(+), 5 deletions(-)
 create mode 100644 sysdeps/tonix/crt-x86_64/crt0.S
 create mode 100644 sysdeps/tonix/generic/Entry.cpp
 create mode 100644 sysdeps/tonix/generic/Generic.cpp
 create mode 120000 sysdeps/tonix/include/abi-bits/abi.h
 create mode 120000 sysdeps/tonix/include/abi-bits/auxv.h
 create mode 120000 sysdeps/tonix/include/abi-bits/blkcnt_t.h
 create mode 120000 sysdeps/tonix/include/abi-bits/blksize_t.h
 create mode 120000 sysdeps/tonix/include/abi-bits/dev_t.h
 create mode 120000 sysdeps/tonix/include/abi-bits/errno.h
 create mode 120000 sysdeps/tonix/include/abi-bits/fcntl.h
 create mode 120000 sysdeps/tonix/include/abi-bits/gid_t.h
 create mode 120000 sysdeps/tonix/include/abi-bits/in.h
 create mode 120000 sysdeps/tonix/include/abi-bits/ino_t.h
 create mode 120000 sysdeps/tonix/include/abi-bits/limits.h
 create mode 120000 sysdeps/tonix/include/abi-bits/mode_t.h
 create mode 120000 sysdeps/tonix/include/abi-bits/nlink_t.h
 create mode 120000 sysdeps/tonix/include/abi-bits/pid_t.h
 create mode 120000 sysdeps/tonix/include/abi-bits/reboot.h
 create mode 120000 sysdeps/tonix/include/abi-bits/resource.h
 create mode 120000 sysdeps/tonix/include/abi-bits/seek-whence.h
 create mode 120000 sysdeps/tonix/include/abi-bits/signal.h
 create mode 120000 sysdeps/tonix/include/abi-bits/socket.h
 create mode 120000 sysdeps/tonix/include/abi-bits/stat.h
 create mode 120000 sysdeps/tonix/include/abi-bits/termios.h
 create mode 120000 sysdeps/tonix/include/abi-bits/time.h
 create mode 120000 sysdeps/tonix/include/abi-bits/uid_t.h
 create mode 120000 sysdeps/tonix/include/abi-bits/vm-flags.h
 create mode 120000 sysdeps/tonix/include/abi-bits/wait.h
 create mode 100644 sysdeps/tonix/include/mlibc/thread-entry.hpp
 create mode 100644 sysdeps/tonix/include/tonix/SystemCall.h
 create mode 100644 sysdeps/tonix/include/tonix/VFS.h
 create mode 100644 sysdeps/tonix/meson.build

diff --git a/meson.build b/meson.build
index 6c7b4073..6a12e308 100644
--- a/meson.build
+++ b/meson.build
@@ -132,6 +132,10 @@ elif host_machine.system() == 'dripos'
 	rtdl_include_dirs += include_directories('sysdeps/dripos/include')
 	libc_include_dirs += include_directories('sysdeps/dripos/include')
 	subdir('sysdeps/dripos')
+elif host_machine.system() == 'tonix'
+    rtdl_include_dirs += include_directories('sysdeps/tonix/include')
+    libc_include_dirs += include_directories('sysdeps/tonix/include')
+    subdir('sysdeps/tonix')
 else
 	error('No sysdeps defined for OS: ' + host_machine.system())
 endif
diff --git a/options/rtdl/generic/linker.cpp b/options/rtdl/generic/linker.cpp
index fb301343..6d5b5362 100644
--- a/options/rtdl/generic/linker.cpp
+++ b/options/rtdl/generic/linker.cpp
@@ -12,9 +12,9 @@
 
 uintptr_t libraryBase = 0x41000000;
 
-bool verbose = false;
-bool stillSlightlyVerbose = false;
-bool logBaseAddresses = false;
+bool verbose = true;
+bool stillSlightlyVerbose = true;
+bool logBaseAddresses = true;
 bool eagerBinding = true;
 
 #if defined(__x86_64__)
diff --git a/options/rtdl/generic/main.cpp b/options/rtdl/generic/main.cpp
index 86c9e00c..976b6500 100644
--- a/options/rtdl/generic/main.cpp
+++ b/options/rtdl/generic/main.cpp
@@ -14,8 +14,8 @@
 #define HIDDEN  __attribute__ ((visibility ("hidden")))
 #define EXPORT  __attribute__ ((visibility ("default")))
 
-static constexpr bool logEntryExit = false;
-static constexpr bool logStartup = false;
+static constexpr bool logEntryExit = true;
+static constexpr bool logStartup = true;
 
 #ifndef MLIBC_STATIC_BUILD
 extern HIDDEN void *_GLOBAL_OFFSET_TABLE_[];
diff --git a/sysdeps/tonix/crt-x86_64/crt0.S b/sysdeps/tonix/crt-x86_64/crt0.S
new file mode 100644
index 00000000..0807ce2b
--- /dev/null
+++ b/sysdeps/tonix/crt-x86_64/crt0.S
@@ -0,0 +1,7 @@
+.section .text
+.global _start
+_start:
+    mov $main, %rdi
+    call __mlibc_entry
+
+.size _start, . - _start
diff --git a/sysdeps/tonix/generic/Entry.cpp b/sysdeps/tonix/generic/Entry.cpp
new file mode 100644
index 00000000..cd1ef677
--- /dev/null
+++ b/sysdeps/tonix/generic/Entry.cpp
@@ -0,0 +1,34 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <bits/ensure.h>
+#include <mlibc/elf/startup.h>
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t* __dlapi_entrystack();
+
+extern char** environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard
+{
+    LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard()
+{
+    __mlibc_initLocale();
+
+    // Parse the exec() stack.
+    mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+    mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv, __mlibc_stack_data.envp);
+}
+
+extern "C" void __mlibc_entry(int (*main_fn)(int argc, char *argv[], char *env[]))
+{
+    auto result = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+    exit(result);
+}
diff --git a/sysdeps/tonix/generic/Generic.cpp b/sysdeps/tonix/generic/Generic.cpp
new file mode 100644
index 00000000..fa1b79ee
--- /dev/null
+++ b/sysdeps/tonix/generic/Generic.cpp
@@ -0,0 +1,293 @@
+#include <bits/ensure.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/thread-entry.hpp>
+#include <errno.h>
+#include <dirent.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <unistd.h>
+
+#include <tonix/SystemCall.h>
+#include <tonix/VFS.h>
+
+namespace mlibc
+{
+    void sys_libc_log(const char* message)
+    {
+        SystemCall(SystemCallID::Log, message);
+    }
+
+    void sys_libc_panic()
+    {
+        SystemCall(SystemCallID::Panic, "mlibc panic!");
+    }
+
+    int sys_open(const char* path, int flags, int* fd)
+    {
+        mlibc::infoLogger() << "[syscall] Open: " << path << " Flags: " << flags << frg::endlog;
+
+        __ensure(!(flags & O_EXEC));
+        __ensure(!(flags & O_CLOEXEC));
+        __ensure(!(flags & O_DIRECTORY));
+        __ensure(!(flags & O_DSYNC));
+        __ensure(!(flags & O_LARGEFILE));
+        __ensure(!(flags & O_NOATIME));
+        __ensure(!(flags & O_NOCTTY));
+        __ensure(!(flags & O_NOFOLLOW));
+        __ensure(!(flags & O_NONBLOCK));
+        __ensure(!(flags & O_NDELAY));
+        __ensure(!(flags & O_PATH));
+        __ensure(!(flags & O_SYNC));
+
+        ssize_t ret = SystemCall(SystemCallID::Open, path, flags);
+
+        if (ret < 0) return -ret;
+
+        *fd = ret;
+        return 0;
+    }
+
+    int sys_close(int fd)
+    {
+        mlibc::infoLogger() << "[syscall] Close: " << fd << frg::endlog;
+
+        ssize_t ret = SystemCall(SystemCallID::Close, fd);
+
+        if (ret < 0) return -ret;
+
+        return 0;
+    }
+
+    int sys_read(int fd, void* buf, size_t count, ssize_t* bytes_read)
+    {
+        mlibc::infoLogger() << "[syscall] Read: " << fd << " Count: " << count << frg::endlog;
+
+        ssize_t ret = SystemCall(SystemCallID::Read, fd, buf, count);
+
+        if (ret < 0) return -ret;
+
+        *bytes_read = ret;
+        return 0;
+    }
+
+#ifndef MLIBC_BUILDING_RTDL
+    int sys_write(int fd, const void* buf, size_t count, ssize_t* bytes_written)
+    {
+        mlibc::infoLogger() << "[syscall] Write: " << fd << " Count: " << count << frg::endlog;
+
+        ssize_t ret = SystemCall(SystemCallID::Write, fd, buf, count);
+
+        if (ret < 0) return -ret;
+
+        *bytes_written = ret;
+        return 0;
+    }
+#endif
+
+    int sys_seek(int fd, off_t offset, int whence, off_t* new_offset)
+    {
+        mlibc::infoLogger() << "[syscall] Seek: " << fd << " Offset: " << offset << " Whence: " << whence << frg::endlog;
+
+        off_t ret = SystemCall(SystemCallID::Seek, fd, offset, whence);
+
+        if (ret < 0) return -ret;
+
+        *new_offset = ret;
+        return 0;
+    }
+
+    int sys_vm_map(void* hint, size_t size, int prot, int flags, int fd, off_t offset, void** window)
+    {
+        mlibc::infoLogger() << "[syscall] mmap: " << (uintptr_t)hint << " Size: " << size << frg::endlog;
+
+        __ensure(flags & MAP_ANONYMOUS || flags & MAP_ANON);
+        __ensure(flags & MAP_PRIVATE);
+
+        __ensure(!(flags & MAP_SHARED));
+
+        auto ret = SystemCall(SystemCallID::FileMap, hint, size);
+
+        *window = reinterpret_cast<void*>(ret);
+        return 0;
+
+        (void)fd;
+        (void)offset;
+        (void)prot;
+    }
+
+    int sys_tcb_set(void* pointer)
+    {
+        mlibc::infoLogger() << "[syscall] TCB set: " << pointer << frg::endlog;
+
+        SystemCall(SystemCallID::TCBSet, pointer);
+        return 0;
+    }
+
+    int sys_anon_allocate(size_t size, void** pointer)
+    {
+        return sys_vm_map(nullptr, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0, pointer);
+    }
+
+    int sys_anon_free(void* pointer, size_t size)
+    {
+        mlibc::infoLogger() << __FUNCTION__ << frg::endlog;
+        SystemCall(SystemCallID::NotImplemented);
+        return 0;
+    }
+
+    int sys_isatty(int fd)
+    {
+        mlibc::infoLogger() << "[syscall] IsTerminal: " << fd << frg::endlog;
+
+        struct stat buffer;
+        int ret = sys_stat(fsfd_target::fd, fd, nullptr, 0, &buffer);
+
+        if (ret > 0) return ret;
+
+        // Assuming that all character device files are ttys
+        return S_ISCHR(buffer.st_mode) ? 0 : ENOTTY;
+    }
+
+#ifndef MLIBC_BUILDING_RTDL
+    void sys_exit(int status)
+    {
+        mlibc::infoLogger() << "[syscall] Exit: " << status << frg::endlog;
+        SystemCall(SystemCallID::Exit, status);
+    }
+#endif
+
+#ifndef MLIBC_BUILDING_RTDL
+    int sys_clock_get(int clock, time_t* secs, long* nanos)
+    {
+        mlibc::infoLogger() << "[syscall] Clock: " << clock << frg::endlog;
+        return 0;
+
+        (void)secs;
+        (void)nanos;
+    }
+#endif
+
+    int sys_vm_unmap(void* pointer, size_t size)
+    {
+        return sys_anon_free(pointer, size);
+    }
+
+    int sys_futex_wait(int* pointer, int expected, const timespec* time)
+    {
+        mlibc::infoLogger() << __FUNCTION__ << frg::endlog;
+        SystemCall(SystemCallID::NotImplemented);
+        return 0;
+    }
+
+    int sys_futex_wake(int* pointer)
+    {
+        mlibc::infoLogger() << __FUNCTION__ << frg::endlog;
+        SystemCall(SystemCallID::NotImplemented);
+        return 0;
+    }
+
+// All remaining functions are disabled in ldso.
+#ifndef MLIBC_BUILDING_RTDL
+
+    int sys_clone(void* entry, void* user_arg, void* tcb, pid_t* tid_out)
+    {
+        mlibc::infoLogger() << __FUNCTION__ << frg::endlog;
+        SystemCall(SystemCallID::NotImplemented);
+        return 0;
+    }
+
+    void sys_thread_exit()
+    {
+        mlibc::infoLogger() << __FUNCTION__ << frg::endlog;
+        SystemCall(SystemCallID::NotImplemented);
+    }
+
+    int sys_sleep(time_t* secs, long* nanos)
+    {
+        mlibc::infoLogger() << "[syscall] Sleep: " << *secs << " Nanos: " << *nanos << frg::endlog;
+        return SystemCall(SystemCallID::Sleep, *secs, *nanos);
+    }
+
+    int sys_fork(pid_t* child)
+    {
+        mlibc::infoLogger() << __FUNCTION__ << frg::endlog;
+        SystemCall(SystemCallID::NotImplemented);
+        return 0;
+    }
+
+    int sys_execve(const char* path, char* const argv[], char* const envp[])
+    {
+        mlibc::infoLogger() << __FUNCTION__ << frg::endlog;
+        SystemCall(SystemCallID::NotImplemented);
+        return 0;
+    }
+
+    pid_t sys_getpid()
+    {
+        mlibc::infoLogger() << __FUNCTION__ << frg::endlog;
+        SystemCall(SystemCallID::NotImplemented);
+        return 0;
+    }
+
+    pid_t sys_getppid()
+    {
+        mlibc::infoLogger() << __FUNCTION__ << frg::endlog;
+        SystemCall(SystemCallID::NotImplemented);
+        return 0;
+    }
+
+    int sys_stat(fsfd_target fsfdt, int fd, const char* path, int flags, struct stat* statbuf)
+    {
+        long ret;
+        VnodeInfo vnodeInfo;
+        switch (fsfdt)
+        {
+            case fsfd_target::fd:
+                mlibc::infoLogger() << "[syscall] FStat: " << fd << frg::endlog;
+                ret = SystemCall(SystemCallID::FStat, fd, &vnodeInfo);
+                break;
+            case fsfd_target::path:
+                mlibc::infoLogger() << "[syscall] Stat: " << path << frg::endlog;
+                ret = SystemCall(SystemCallID::Stat, path, &vnodeInfo);
+                break;
+            default: sys_libc_panic();
+        }
+
+        if (ret < 0) return -ret;
+
+        statbuf->st_mode = 0;
+        switch (vnodeInfo.type)
+        {
+            case VnodeType::RegularFile:
+                statbuf->st_mode |= S_IFREG;
+                break;
+            case VnodeType::Directory:
+                statbuf->st_mode |= S_IFDIR;
+                break;
+            case VnodeType::CharacterDevice:
+                statbuf->st_mode |= S_IFCHR;
+                break;
+            default: sys_libc_panic();
+        }
+
+        statbuf->st_ino = vnodeInfo.inodeNum;
+        statbuf->st_size = vnodeInfo.fileSize;
+
+        return 0;
+    }
+
+    int sys_access(const char* filename, int mode)
+    {
+        mlibc::infoLogger() << "[syscall] Access: " << filename << " Mode: " << mode << frg::endlog;
+
+        if (mode == F_OK)
+        {
+            sys_libc_panic();
+        }
+
+        return 0;
+    }
+
+#endif // MLIBC_BUILDING_RTDL
+}
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/abi.h b/sysdeps/tonix/include/abi-bits/abi.h
new file mode 120000
index 00000000..c9458601
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/abi.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/abi.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/auxv.h b/sysdeps/tonix/include/abi-bits/auxv.h
new file mode 120000
index 00000000..0f144153
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/lemon/auxv.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/blkcnt_t.h b/sysdeps/tonix/include/abi-bits/blkcnt_t.h
new file mode 120000
index 00000000..e9d9f1b4
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blkcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/blksize_t.h b/sysdeps/tonix/include/abi-bits/blksize_t.h
new file mode 120000
index 00000000..c6dfb6e0
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blksize_t.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/dev_t.h b/sysdeps/tonix/include/abi-bits/dev_t.h
new file mode 120000
index 00000000..0c1143b9
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/dev_t.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/errno.h b/sysdeps/tonix/include/abi-bits/errno.h
new file mode 120000
index 00000000..589859fb
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/errno.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/fcntl.h b/sysdeps/tonix/include/abi-bits/fcntl.h
new file mode 120000
index 00000000..ea5323ad
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/fcntl.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/gid_t.h b/sysdeps/tonix/include/abi-bits/gid_t.h
new file mode 120000
index 00000000..6a772180
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/gid_t.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/in.h b/sysdeps/tonix/include/abi-bits/in.h
new file mode 120000
index 00000000..b58c683f
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/in.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/ino_t.h b/sysdeps/tonix/include/abi-bits/ino_t.h
new file mode 120000
index 00000000..10d644e7
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/ino_t.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/limits.h b/sysdeps/tonix/include/abi-bits/limits.h
new file mode 120000
index 00000000..1aa58942
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/limits.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/limits.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/mode_t.h b/sysdeps/tonix/include/abi-bits/mode_t.h
new file mode 120000
index 00000000..29d77331
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/mode_t.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/nlink_t.h b/sysdeps/tonix/include/abi-bits/nlink_t.h
new file mode 120000
index 00000000..7618c27f
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/nlink_t.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/pid_t.h b/sysdeps/tonix/include/abi-bits/pid_t.h
new file mode 120000
index 00000000..3fd26a7f
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/pid_t.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/reboot.h b/sysdeps/tonix/include/abi-bits/reboot.h
new file mode 120000
index 00000000..ecc3ddb9
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/reboot.h
@@ -0,0 +1 @@
+../../../../abis/linux/x86_64/reboot.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/resource.h b/sysdeps/tonix/include/abi-bits/resource.h
new file mode 120000
index 00000000..3e59c750
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/resource.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/seek-whence.h b/sysdeps/tonix/include/abi-bits/seek-whence.h
new file mode 120000
index 00000000..d22e9933
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/lemon/x86_64/seek-whence.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/signal.h b/sysdeps/tonix/include/abi-bits/signal.h
new file mode 120000
index 00000000..b20e5119
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/signal.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/socket.h b/sysdeps/tonix/include/abi-bits/socket.h
new file mode 120000
index 00000000..b754d701
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/linux/x86_64/socket.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/stat.h b/sysdeps/tonix/include/abi-bits/stat.h
new file mode 120000
index 00000000..82642c3c
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/stat.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/termios.h b/sysdeps/tonix/include/abi-bits/termios.h
new file mode 120000
index 00000000..cfcfe763
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/termios.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/time.h b/sysdeps/tonix/include/abi-bits/time.h
new file mode 120000
index 00000000..97f3d52d
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/time.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/uid_t.h b/sysdeps/tonix/include/abi-bits/uid_t.h
new file mode 120000
index 00000000..1113eba6
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/uid_t.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/vm-flags.h b/sysdeps/tonix/include/abi-bits/vm-flags.h
new file mode 120000
index 00000000..f1a985e6
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/vm-flags.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/abi-bits/wait.h b/sysdeps/tonix/include/abi-bits/wait.h
new file mode 120000
index 00000000..6d911c7f
--- /dev/null
+++ b/sysdeps/tonix/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/wait.h
\ No newline at end of file
diff --git a/sysdeps/tonix/include/mlibc/thread-entry.hpp b/sysdeps/tonix/include/mlibc/thread-entry.hpp
new file mode 100644
index 00000000..9bda0961
--- /dev/null
+++ b/sysdeps/tonix/include/mlibc/thread-entry.hpp
@@ -0,0 +1,11 @@
+#pragma once
+
+#include <mlibc/tcb.hpp>
+
+extern "C" void __mlibc_start_thread(void);
+extern "C" void __mlibc_enter_thread(void* entry, void* user_arg, Tcb* tcb);
+
+namespace mlibc
+{
+    void* prepare_stack(void* entry, void* user_arg, void* tcb);
+}
\ No newline at end of file
diff --git a/sysdeps/tonix/include/tonix/SystemCall.h b/sysdeps/tonix/include/tonix/SystemCall.h
new file mode 100644
index 00000000..83062751
--- /dev/null
+++ b/sysdeps/tonix/include/tonix/SystemCall.h
@@ -0,0 +1,55 @@
+#pragma once
+
+#include <sys/types.h>
+
+enum class SystemCallID
+{
+    Open = 0,
+    Read = 1,
+    Write = 2,
+    Seek = 3,
+    Close = 4,
+    FileMap = 5,
+    TCBSet = 6,
+    Exit = 8,
+    Sleep = 9,
+    Stat = 10,
+    FStat = 11,
+    Panic = 254,
+    Log = 255,
+    NotImplemented = 253
+};
+
+static ssize_t SystemCallOverload(SystemCallID call)
+{
+    ssize_t ret;
+    asm volatile("int $0x80" : "=a"(ret) : "a"(call));
+    return ret;
+}
+
+static ssize_t SystemCallOverload(SystemCallID call, ssize_t arg0)
+{
+    ssize_t ret;
+    asm volatile("int $0x80" : "=a"(ret) : "a"(call), "D"(arg0));
+    return ret;
+}
+
+static ssize_t SystemCallOverload(SystemCallID call, ssize_t arg0, ssize_t arg1)
+{
+    ssize_t ret;
+    asm volatile("int $0x80" : "=a"(ret) : "a"(call), "D"(arg0), "S"(arg1));
+    return ret;
+}
+
+static ssize_t SystemCallOverload(SystemCallID call, ssize_t arg0, ssize_t arg1, ssize_t arg2)
+{
+    ssize_t ret;
+    asm volatile("int $0x80" : "=a"(ret) : "a"(call), "D"(arg0), "S"(arg1), "d"(arg2));
+    return ret;
+}
+
+template <typename...T>
+__attribute__((always_inline)) static inline ssize_t SystemCall(SystemCallID call, T... arguments)
+{
+    return SystemCallOverload(call, (ssize_t)arguments...);
+}
\ No newline at end of file
diff --git a/sysdeps/tonix/include/tonix/VFS.h b/sysdeps/tonix/include/tonix/VFS.h
new file mode 100644
index 00000000..7ae3d15b
--- /dev/null
+++ b/sysdeps/tonix/include/tonix/VFS.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include <stdint.h>
+
+enum class VnodeType
+{
+    Unknown = 0,
+    RegularFile = 1,
+    Directory = 2,
+    CharacterDevice = 3
+};
+
+struct VnodeInfo
+{
+    VnodeType type;
+    uint32_t inodeNum;
+    uint32_t fileSize;
+} __attribute__((packed));
\ No newline at end of file
diff --git a/sysdeps/tonix/meson.build b/sysdeps/tonix/meson.build
new file mode 100644
index 00000000..dc7bcbdd
--- /dev/null
+++ b/sysdeps/tonix/meson.build
@@ -0,0 +1,51 @@
+
+rtdl_sources += files(
+	'generic/Generic.cpp'
+)
+
+libc_sources += files(
+	'generic/Entry.cpp',
+	'generic/Generic.cpp'
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/abi.h',
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/reboot.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/time.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/wait.h',
+		'include/abi-bits/limits.h',
+		subdir: 'abi-bits'
+	)
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: 'crt-x86_64/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+endif
\ No newline at end of file
-- 
2.25.1

