From e56596cc727d745c92f5f838f71cb41cc8c1208a Mon Sep 17 00:00:00 2001
From: Kyota Poeti <kyota.exe@gmail.com>
Date: Sat, 4 Jun 2022 15:30:37 -0400
Subject: [PATCH 1/1] doomgeneric tonix port

---
 .gitignore                      |   3 +
 doomgeneric/Makefile.tonix      |  63 ++++++++++
 doomgeneric/d_main.c            |   4 +
 doomgeneric/doomgeneric_tonix.c | 209 ++++++++++++++++++++++++++++++++
 doomgeneric/m_config.c          |   2 +-
 5 files changed, 280 insertions(+), 1 deletion(-)
 create mode 100644 .gitignore
 create mode 100644 doomgeneric/Makefile.tonix
 create mode 100644 doomgeneric/doomgeneric_tonix.c

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..29e1ddc
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,3 @@
+build
+doomgeneric/doomgeneric
+doomgeneric/doomgeneric.map
diff --git a/doomgeneric/Makefile.tonix b/doomgeneric/Makefile.tonix
new file mode 100644
index 0000000..eab45bf
--- /dev/null
+++ b/doomgeneric/Makefile.tonix
@@ -0,0 +1,63 @@
+################################################################
+#
+# $Id:$
+#
+# $Log:$
+#
+
+ifeq ($(V),1)
+	VB=''
+else
+	VB=@
+endif
+
+CC=x86_64-tonix-gcc
+
+CFLAGS+=-O0 -g
+LDFLAGS+=-Wl,--gc-sections
+CFLAGS+=-Wall -DNORMALUNIX -DLINUX -DSNDSERV -D_DEFAULT_SOURCE
+
+LIBS+=-lm -lc
+
+OBJDIR=build
+OUTPUT=doomgeneric
+
+SRC_DOOM = i_main.o dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o \
+		d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o \
+		g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o \
+		i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o \
+		m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o \
+		p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o \
+		p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o \
+		r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o \
+		sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o \
+		w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o \
+		doomgeneric.o doomgeneric_tonix.o
+
+OBJS += $(addprefix $(OBJDIR)/, $(SRC_DOOM))
+
+all: $(OUTPUT)
+
+clean:
+	rm -rf $(OBJDIR)
+	rm -f $(OUTPUT)
+	rm -f $(OUTPUT).gdb
+	rm -f $(OUTPUT).map
+
+$(OUTPUT): $(OBJS)
+	@echo [Linking $@]
+
+	$(VB)$(CC) $(CFLAGS) $(LDFLAGS) $(OBJS) \
+		-o $(OUTPUT) $(LIBS) -Wl,-Map,$(OUTPUT).map
+
+	@echo [Size]
+	-$(CROSS_COMPILE)size $(OUTPUT)
+
+$(OBJS): | $(OBJDIR)
+
+$(OBJDIR):
+	mkdir -p $(OBJDIR)
+
+$(OBJDIR)/%.o: %.c
+	@echo [Compiling $<]
+	$(VB)$(CC) $(CFLAGS) -c $< -o $@
diff --git a/doomgeneric/d_main.c b/doomgeneric/d_main.c
index c7cf977..f83348d 100644
--- a/doomgeneric/d_main.c
+++ b/doomgeneric/d_main.c
@@ -432,6 +432,10 @@ void D_DoomLoop (void)
     V_RestoreBuffer();
     R_ExecuteSetViewSize();
 
+    printf("\033[1;33m"
+           "Movement: WASD\n"
+           "Shoot: J\033[0m\n");
+
     D_StartGameLoop();
 
     if (testcontrols)
diff --git a/doomgeneric/doomgeneric_tonix.c b/doomgeneric/doomgeneric_tonix.c
new file mode 100644
index 0000000..0abf8df
--- /dev/null
+++ b/doomgeneric/doomgeneric_tonix.c
@@ -0,0 +1,209 @@
+#include "doomgeneric.h"
+#include "doomkeys.h"
+
+#include <fcntl.h>
+#include <stdarg.h>
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <termios.h>
+#include <unistd.h>
+
+#include <sys/mman.h>
+#include <sys/time.h>
+
+#define LOG_INFO 0
+#define KEYBOARD_QUEUE_SIZE 16
+
+FILE* keyboard = NULL;
+FILE* framebuffer = NULL;
+
+static uint32_t screenWidth = 0;
+static uint32_t screenHeight = 0;
+
+static uint16_t keyQueue[KEYBOARD_QUEUE_SIZE];
+static uint32_t keyQueueWriteIndex = 0;
+static uint32_t keyQueueReadIndex = 0;
+
+static void log_info(const char* message, ...)
+{
+#ifdef LOG_INFO
+    va_list args;
+    va_start(args, message);
+    printf("\033[1;32minfo\033[0m: ");
+    vprintf(message, args);
+    printf("\n");
+    va_end(args);
+    fflush(stdout);
+#endif
+}
+
+static void log_error(const char* message)
+{
+    printf("\033[1;31minfo\033[0m: %s\n", message);
+    fflush(stdout);
+}
+
+struct termios orig_termios;
+
+static void disable_raw_tty()
+{
+    tcsetattr(STDIN_FILENO, TCSAFLUSH, &orig_termios);
+}
+
+static void enable_raw_tty()
+{
+    tcgetattr(STDIN_FILENO, &orig_termios);
+
+    struct termios raw = orig_termios;
+    raw.c_lflag &= ~(ECHO | ICANON);
+    raw.c_cc[VMIN] = 0;
+    tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);
+}
+
+static uint8_t convert_to_doom_key(uint8_t scanCode)
+{
+    uint8_t key = 0;
+
+    switch (scanCode)
+    {
+    case 28: // Enter
+        key = KEY_ENTER;
+        break;
+
+    case 1: // Escape
+        key = KEY_ESCAPE;
+        break;
+
+    case 0x1e: // A
+        key = KEY_LEFTARROW;
+        break;
+
+    case 0x20: // D
+        key = KEY_RIGHTARROW;
+        break;
+
+    case 0x11: // W
+        key = KEY_UPARROW;
+        break;
+
+    case 0x1f: // S
+        key = KEY_DOWNARROW;
+        break;
+
+    case 0x24: // J
+        key = KEY_FIRE;
+        break;
+
+    case 0x39: // Space
+        key = KEY_USE;
+        break;
+
+    case 0x36: // Right Shift
+        key = KEY_RSHIFT;
+        break;
+
+    case 0x15: // Y
+        key = 'y';
+        break;
+
+    default:
+        break;
+    }
+
+    return key;
+}
+
+static void push_key_to_queue(uint8_t pressed, uint8_t key_code)
+{
+    uint8_t key = convert_to_doom_key(key_code);
+    uint16_t key_data = (pressed << 8) | key;
+
+    keyQueue[keyQueueWriteIndex++] = key_data;
+    keyQueueWriteIndex %= KEYBOARD_QUEUE_SIZE;
+}
+
+static void handle_keyboard_input()
+{
+    uint8_t scanCode = 0;
+    size_t result = read(fileno(keyboard), &scanCode, 1);
+
+    if (result > 0)
+    {
+        uint8_t key_released = (0x80 & scanCode);
+        scanCode = (0x7f & scanCode);
+        push_key_to_queue(key_released == 0 ? 1 : 0, scanCode);
+    }
+}
+
+void DG_Init()
+{
+    log_info("Initializing framebuffer");
+
+    framebuffer = fopen("/dev/fb", "r+");
+    if (framebuffer == NULL)
+    {
+        log_error("Failed to open /dev/fb");
+        exit(1);
+    }
+
+    screenWidth = 1024;
+    screenHeight = 768;
+
+    log_info("Framebuffer: (width=%lu, height=%lu)", (uint64_t)screenWidth, (uint64_t)screenHeight);
+
+    enable_raw_tty();
+    atexit(disable_raw_tty);
+
+    keyboard = fopen("/dev/kbd", "r");
+    if (keyboard == NULL)
+    {
+        log_error("Failed to open /dev/kbd");
+        exit(1);
+    }
+
+    log_info("Successfully initialized");
+}
+
+void DG_DrawFrame()
+{
+    for (int y = 0; y < DOOMGENERIC_RESY; y++)
+    {
+        fseek(framebuffer, screenWidth * 4 * y, SEEK_SET);
+        fwrite(DG_ScreenBuffer + y * DOOMGENERIC_RESX, DOOMGENERIC_RESX, 4, framebuffer);
+    }
+
+    handle_keyboard_input();
+}
+
+void DG_SleepMs(uint32_t ms)
+{
+    usleep(ms * 1000);
+}
+
+uint32_t DG_GetTicksMs()
+{
+    struct timeval tp;
+    struct timezone tzp;
+
+    gettimeofday(&tp, &tzp);
+
+    return (tp.tv_sec * 1000) + (tp.tv_usec / 1000);
+}
+
+int DG_GetKey(int* pressed, unsigned char* doomKey)
+{
+    if (keyQueueWriteIndex == keyQueueReadIndex) return 0;
+
+    uint16_t key_data = keyQueue[keyQueueReadIndex++];
+    keyQueueReadIndex %= KEYBOARD_QUEUE_SIZE;
+
+    *pressed = key_data >> 8;
+    *doomKey = key_data & 0xff;
+
+    return 1;
+}
+
+void DG_SetWindowTitle(const char* title) {}
diff --git a/doomgeneric/m_config.c b/doomgeneric/m_config.c
index 865e168..9d590e9 100644
--- a/doomgeneric/m_config.c
+++ b/doomgeneric/m_config.c
@@ -2076,7 +2076,7 @@ void M_SetConfigDir(char *dir)
 
     // Make the directory if it doesn't already exist:
 
-    M_MakeDirectory(configdir);
+    //M_MakeDirectory(configdir);
 }
 
 //
-- 
2.25.1

